// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UM.Persistence.DbContexts;

#nullable disable

namespace UM.Persistence.Migrations
{
    [DbContext(typeof(UserManagementDbContext))]
    partial class UserManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UM.Domain.Aggregates.User.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ExpireDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(4);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnOrder(3);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("UM.Domain.Aggregates.User.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("UM.Domain.Aggregates.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(8);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<DateTimeOffset?>("LastModifyDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(3);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.ComplexProperty<Dictionary<string, object>>("Password", "UM.Domain.Aggregates.User.User.Password#Password", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("PasswordHash")
                                .HasColumnOrder(6);

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("PasswordSalt")
                                .HasColumnOrder(5);
                        });

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 4, 0, 0, 0)),
                            CreatorId = 1,
                            Email = "dato.gugushvili@gmail.com",
                            IsDeleted = false,
                            Name = "Davit",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("UM.Domain.Aggregates.User.Entities.RefreshToken", b =>
                {
                    b.HasOne("UM.Domain.Aggregates.User.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UM.Domain.Aggregates.User.User", b =>
                {
                    b.HasOne("UM.Domain.Aggregates.User.User", "Creator")
                        .WithMany("InverseCreator")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("FK_User_User_Creator");

                    b.HasOne("UM.Domain.Aggregates.User.User", "LastModifier")
                        .WithMany("InverseLastModifier")
                        .HasForeignKey("LastModifierId")
                        .HasConstraintName("FK_User_User_LastModifier");

                    b.HasOne("UM.Domain.Aggregates.User.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Creator");

                    b.Navigation("LastModifier");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UM.Domain.Aggregates.User.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UM.Domain.Aggregates.User.User", b =>
                {
                    b.Navigation("InverseCreator");

                    b.Navigation("InverseLastModifier");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
